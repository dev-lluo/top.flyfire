package top.flyfire.degetation.go;

import top.flyfire.degetation.KVal;
import top.flyfire.degetation.loop.Loop;
import top.flyfire.degetation.loop.Loop.LoopTask;
import top.flyfire.degetation.validator.Validator;

public final class Go implements Validator {
	public interface GoTask{
		void run();
	}
	public class TaskList<T>{
		private KVal<T, GoTask>[] list;
		public TaskList(KVal<T, GoTask>...list) {
			// TODO Auto-generated constructor stub
			this.list = list;
		}
		private void choose(final T key){
			Loop.run(list, new LoopTask<KVal<T, GoTask>>() {

				@Override
				public boolean run(KVal<T, GoTask> t, int index) {
					// TODO Auto-generated method stub
					if(Obj.isNull(key)&&Obj.isNull(t.key())){
						GoTask goTask = t.val();
						Go.to(Obj.notNull(goTask), goTask);
						return true;
					}else if(Obj.notNull(key)&&key.equals(t.key())){
						GoTask goTask = t.val();
						Go.to(Obj.notNull(goTask), goTask);
						return true;
					}
					return false;
				}

			});
		}
	}
	public interface SimpleGoValidator extends GoValidator<Boolean>{
		Boolean validate();
	}
	public interface  GoValidator<T>{
		T validate();
	}
	public static final void to(boolean flag,GoTask task){
		if(flag){
			task.run();
		}
	}
	public static final void to(SimpleGoValidator validator,GoTask task){
		if(validator.validate()){
			task.run();
		}
	}
	public static final <T> void to(GoValidator<T> validator , TaskList<T> list){
		list.choose(validator.validate());
	}
	public static final void notNullTo(Object obj,GoTask task){
		Go.to(Obj.notNull(obj),task);
	}
}
