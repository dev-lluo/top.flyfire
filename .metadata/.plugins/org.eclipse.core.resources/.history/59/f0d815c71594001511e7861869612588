package top.flyfire.degetation.tree.binarytree;

public class HashBTreeGroup<O extends Comparable<O>> {
	 BinaryTree<O>[] table; // 槽数组，也称桶数组。
     int count; // table中实际存放的Entry数量。
     int threshold; // 当table数量超过该阈值后，进行reash。（该值为 capacity * loadFactor）
     float loadFactor; // 加载因子，默认是0.75f。
     
     public HashBTreeGroup(BinaryTree<O>[] table){
    	 this(11,0.75f,table);
     }
 
     public HashBTreeGroup(int initialCapacity/*默认是11*/, float loadFactor, BinaryTree<O>[] table) {
          if(initialCapacity==0) initialCapacity=1;
          this.loadFactor = loadFactor;
          this.table = table;
          this.threshold = (int)(initialCapacity * loadFactor);
     }
 
     // put()： 若key存在，返回旧value；若key不存在，返回null。
     public synchronized O put(O value) {
          // 检查key是否已经存在，若存在则覆盖已经存在value，并返回被覆盖的value。
    	  BinaryTree<?> tab[] = table;
          int hash = value.hashCode();
          int index = (hash & 0x7FFFFFFF) % tab.length; // 存储槽位索引。
          BinaryTree<?> e = tab[index];
          if(e!=null){
        	  BinaryTreeNode<O> old = e.find(value);
        	  
          }
          for( e!=null; e=e.next ) { // 在冲突链表中寻找
               if( (e.hash == hash ) && e.key.equals(key) ) {
                         V old = e.value;
                         e.value = value; // 新value覆盖旧value
                         return old;
                    }
          }
 
          // 是否需要rehash
          if(count >= threshold){
               rehash();
               tab = table; // rehash完毕后，修正tab指针指向新的Entry[]
               index =  (hash & 0x7FFFFFFF) % tab.length; // 重新计算Slot的index
          }
 
          // 存储到槽位，如果有冲突，新来的元素被放到了链表前面。
          Entry<K,V> e = tab[index]; // 旧有Entry
          tab[index] = new Entry<>(hash,key,value,e/* 旧有Entry成为了新增Entry的next */);
          count ++;
          return null;
     }
 
     // rehash(): 再次hash。当Entry[]的实际存储数量占分配容量的约75%时，扩容并且重新计算各个对象的槽位
     static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8 ;
     protected void rehash() {
          int oldCapacity = table.length;
          Entry[] oldMap = table;
          int newCapacity = (oldCapacity << 1) + 1; // 2倍+1
          Entry[] newMap = new Entry[newCapacity];
          threshold = (int)(newCapacity * loadFactor);
          table = newMap;
 
          for( int i=oldCapacity; i-- >0;){ //  i的取值范围为 [oldCapacity-1,0]
               for (Entry<K,V> old = oldMap[i]; old!=null;){ // 遍历旧Entry[]
                    Entry<K,V> e = old;
                    int index = (e.hash & 0x7FFFFFFF) % newCapacity;     // 重新计算各个元素在新Entry[]中的槽位index。
                    e.next = newMap[index]; // 已经存在槽位中的Entry放到当前元素的next中
                    newMap[index]=e;     // 放到槽位中
                    old = old.next;
               }
          }
 
     }
}
