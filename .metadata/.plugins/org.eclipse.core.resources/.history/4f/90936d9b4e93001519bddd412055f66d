package top.flyfire.degetation.net.tcp.c2c;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

import top.flyfire.degetation.Const;
import top.flyfire.degetation.UUID;
import top.flyfire.degetation.buffer.BufferEngine;
import top.flyfire.degetation.net.IServer;
import top.flyfire.degetation.net.ServerConfig;
import top.flyfire.degetation.thread.RunTask;

public class C2CServer implements IServer,Const {
	
	private ServerSocket socket;
	@SuppressWarnings("unused")
	private ServerConfig config;
	private boolean status = OFF;

	@Override
	public synchronized void startup(ServerConfig config) {
		// TODO Auto-generated method stub
		if(status==OFF){
			this.config = config;
			try {
				this.socket = new ServerSocket(config.getPort());
				this.run();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				throw new RuntimeException(e);
			}
		}
	}
	
	protected void run() throws IOException {
		Socket clientSocket = this.socket.accept();
		do{
			
		}while((clientSocket=this.socket.accept())!=null);
	}

	@Override
	public synchronized void shutdown() {
		// TODO Auto-generated method stub
		if(status==ON){
			try {
				this.socket.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				throw new RuntimeException(e);
			}
			this.socket = null;
			this.config = null;
		}
	}
	
	public class NewClient extends RunTask<Object>{
		
		private Socket socket;
		
		public NewClient(Socket socket){
			this.socket = socket;
		}

		@Override
		protected void exec() {
			// TODO Auto-generated method stub
			/*
			 * 安全起见
			 * 输入id和输出id采取两套；
			 * 所有的客户端只需要知道输出id即可
			 * 防止客户端伪造输入id
			 */
			String inputId = UUID.$.createGUID();
			String outputId = UUID.$.createGUID();
			BufferEngine<byte[]> inputEngine = new BufferEngine<byte[]>();
			BufferEngine<byte[]> outputEngine = new BufferEngine<byte[]>();
			
			IdToBuffer buffer0 = new IdToBuffer(inputId, inputEngine);
			IdToBuffer.Store.putInput(buffer0);
			
			IdToBuffer buffer1 = new IdToBuffer(outputId, outputEngine);
			IdToBuffer.Store.putOutput(buffer1);
			
			new ClientSocket(this.socket, inputEngine, outputEngine);
		}
		
	}

}
