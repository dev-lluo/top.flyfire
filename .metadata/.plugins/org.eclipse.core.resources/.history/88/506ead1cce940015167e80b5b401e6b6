package top.flyfire.degetation.net.tcp.c2c;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;

import top.flyfire.degetation.Const;
import top.flyfire.degetation.buffer.BufferEngine;
import top.flyfire.degetation.buffer.IBuffer;
import top.flyfire.degetation.stream.Stream;
import top.flyfire.degetation.stream.Stream.Task;
import top.flyfire.degetation.thread.RunTask;
import top.flyfire.degetation.thread.ThreadMgr;
import top.flyfire.degetation.thread.ThreadPool;

public class ClientSocket  {
	
	private final Socket socket;
	
	private final BufferEngine<byte[][]> inputEngine;
	
	private final BufferEngine<byte[][]> outputEngine;
	
	private final OutputStream outputStream;
	
	private final InputStream inputStream;
	
	private final InetAddress inetAddress;
	
	private final String clientAddr;
	
	private final int clientPort;
	
	private final String clientName;
	
	private final ThreadPool pool;
	
	public ClientSocket(Socket socket, BufferEngine<byte[][]> inputEngine, BufferEngine<byte[][]> outputEngine) {
		super();
		this.socket = socket;
		this.inputEngine = inputEngine;
		this.outputEngine = outputEngine;
		try {
			this.inputStream = this.socket.getInputStream();
			this.outputStream = this.socket.getOutputStream();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			throw new RuntimeException(e);
		}
		this.inetAddress = socket.getInetAddress();
		this.clientAddr = this.inetAddress.getHostAddress();
		this.clientPort = this.socket.getPort();
		this.clientName = this.inetAddress.getHostName();
		this.pool = ThreadMgr.live(this.clientName+"["+this.clientAddr+":"+this.clientPort+"]",2);
		Const.CONSOLE.info(this.pool.getPoolInfo());
		this.pool.execute(new DealInput(),new DealOutput());
		
	}
	
	public class StreamBuffer implements IBuffer<byte[][]>{
		
		public static final int HEAD = 0;
		public static final int BODY = 1;
		public static final int FOOT = 2;
		
		public boolean isEnd(byte[] by){
			return by.length==6&&by[0]==-1&&by[1]==-1&by[2]==-1&by[3]==-1&&by[4]==-1&&by[5]==-1;
		}
		
		private byte[][] buffer;
		
		public StreamBuffer(){
			this(new byte[0][0]);
		}

		public StreamBuffer(byte[][] buffer) {
			super();
			this.buffer = buffer;
		}

		@Override
		public byte[][] unLoad() {
			// TODO Auto-generated method stub
			byte[][] temp = this.buffer;
			this.buffer = null;
			return temp;
			
		}
		
		public byte[] unLoad(int pos){
			return buffer[pos];
		}

		@Override
		public void load(byte[][] t) {
			// TODO Auto-generated method stub
			this.buffer = t;
		}
		
		public void load(byte[] t,int pos){
			byte[] temp = new byte[t.length+this.buffer[pos].length];
			System.arraycopy(this.buffer[pos], 0, temp, 0, this.buffer[pos].length);
			System.arraycopy(t, 0, temp, this.buffer[pos].length, t.length);
			this.buffer[pos] = temp;
		}

		@Override
		public boolean isEmpty() {
			// TODO Auto-generated method stub
			return this.buffer==null||this.buffer.length==0;
		}

		
	}
	
	public class DealInput extends RunTask<byte[][]>{

		@Override
		protected void exec() {
			// TODO Auto-generated method stub
			final StreamBuffer buffer = new StreamBuffer();
			Stream.run(ClientSocket.this.inputStream, new Task() {
				
				@Override
				public boolean exec(byte[] by, int len) throws IOException {
					// TODO Auto-generated method stub
					boolean isEnd = buffer.isEnd(by);
					int pos = buffer.isEmpty()?StreamBuffer.HEAD:(isEnd?StreamBuffer.FOOT:StreamBuffer.BODY);
					buffer.load(by, pos);
					return isEnd;
				}
			});
			ClientSocket.this.inputEngine.write(buffer);
		}
		
		@Override
		public boolean needRepeat() {
			// TODO Auto-generated method stub
			return true;
		}
		
	}
	
	public class DealOutput extends RunTask<byte[]>{

		@Override
		protected void exec() {
			// TODO Auto-generated method stub
			StreamBuffer buffer = new StreamBuffer();
			ClientSocket.this.outputEngine.read(buffer);
			if(!buffer.isEmpty()){
				try {
					ClientSocket.this.outputStream.write(buffer.unLoad(StreamBuffer.HEAD));
					ClientSocket.this.outputStream.flush();
					ClientSocket.this.outputStream.write(buffer.unLoad(StreamBuffer.BODY));
					ClientSocket.this.outputStream.flush();
					ClientSocket.this.outputStream.write(buffer.unLoad(StreamBuffer.FOOT));
					ClientSocket.this.outputStream.flush();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					Const.CONSOLE.error(e);
				}
			}
		}

		@Override
		public boolean needRepeat() {
			// TODO Auto-generated method stub
			return true;
		}
		
		
	
	}
	
}
